name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: compression-utility
            asset_name: compression-utility-linux-amd64
          - os: windows-latest
            artifact_name: compression-utility.exe
            asset_name: compression-utility-windows-amd64.exe
          - os: macos-latest
            artifact_name: compression-utility
            asset_name: compression-utility-macos-amd64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Build
        run: cargo build --release

      - name: Package Binary
        shell: bash
        run: |
          cd target/release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a ../../${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
          else
            tar -czf ../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          fi
          cd ../..

      - name: Upload Release Asset (zip)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}.zip
          asset_name: ${{ matrix.asset_name }}.zip
          asset_content_type: application/zip

      - name: Upload Release Asset (tar.gz)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}.tar.gz
          asset_name: ${{ matrix.asset_name }}.tar.gz
          asset_content_type: application/gzip
